
st_ids.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  00800240  00800240  00000a3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d9  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b71  00000000  00000000  00002641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5a  00000000  00000000  000031b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  0000410c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  000044c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b2  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000536a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	af c0       	rjmp	.+350    	; 0x162 <__vector_1>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 34       	cpi	r26, 0x40	; 64
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a0 e4       	ldi	r26, 0x40	; 64
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 3f       	cpi	r26, 0xF8	; 248
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	31 d2       	rcall	.+1122   	; 0x4bc <main>
  5a:	b3 c3       	rjmp	.+1894   	; 0x7c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
void ids_check_sms(void);


/* ISR for USART */
ISR(USART_RXC_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	8f 93       	push	r24
  6e:	9f 93       	push	r25
  70:	ef 93       	push	r30
  72:	ff 93       	push	r31
	char temp;
	temp=UDR;
  74:	8c b1       	in	r24, 0x0c	; 12
	if (temp!='\r'&&temp!='\n') // Removing Newline and Start character from USART buffer
  76:	8d 30       	cpi	r24, 0x0D	; 13
  78:	81 f0       	breq	.+32     	; 0x9a <__vector_11+0x3c>
  7a:	8a 30       	cpi	r24, 0x0A	; 10
  7c:	71 f0       	breq	.+28     	; 0x9a <__vector_11+0x3c>
	{
		info[x]=temp;
  7e:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <x>
  82:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <x+0x1>
  86:	f9 01       	movw	r30, r18
  88:	e2 5b       	subi	r30, 0xB2	; 178
  8a:	fd 4f       	sbci	r31, 0xFD	; 253
  8c:	80 83       	st	Z, r24
		x++;
  8e:	2f 5f       	subi	r18, 0xFF	; 255
  90:	3f 4f       	sbci	r19, 0xFF	; 255
  92:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <x+0x1>
  96:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <x>
	}
	status=1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <status+0x1>
  a2:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <status>
}
  a6:	ff 91       	pop	r31
  a8:	ef 91       	pop	r30
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	3f 91       	pop	r19
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <ids_system_arm>:



void ids_system_arm()
{
	if (st==0)
  bc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <st>
  c0:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <st+0x1>
  c4:	89 2b       	or	r24, r25
  c6:	39 f4       	brne	.+14     	; 0xd6 <ids_system_arm+0x1a>
	{
		st=1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <st+0x1>
  d0:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <st>
		ids_beep();
  d4:	48 d2       	rcall	.+1168   	; 0x566 <ids_beep>
	}
	ids_set_sys_led(ON);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	3c d2       	rcall	.+1144   	; 0x554 <ids_set_sys_led>
	eeprom_write_byte(000000,2);
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	62 d3       	rcall	.+1732   	; 0x7a8 <eeprom_write_byte>
  e4:	08 95       	ret

000000e6 <__vector_2>:
	ids_system_disarm();
}

/* ISR for ON Signal from Remote*/
ISR(INT1_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	ids_system_arm();
 108:	d9 df       	rcall	.-78     	; 0xbc <ids_system_arm>
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <ids_system_disarm>:
	eeprom_write_byte(000000,2);
}

void ids_system_disarm()
{
	if (st==0)
 12c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <st>
 130:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <st+0x1>
 134:	89 2b       	or	r24, r25
 136:	39 f4       	brne	.+14     	; 0x146 <ids_system_disarm+0x1a>
	{
		st=1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <st+0x1>
 140:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <st>
		ids_beep(); // beep buzzer once
 144:	10 d2       	rcall	.+1056   	; 0x566 <ids_beep>
	}
	ids_set_sys_led(OFF); //ids_set_sys_state()
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	04 d2       	rcall	.+1032   	; 0x554 <ids_set_sys_led>
	ids_siren_disable();
 14c:	bd d1       	rcall	.+890    	; 0x4c8 <ids_siren_disable>
	ids_disconn_call();
 14e:	58 d2       	rcall	.+1200   	; 0x600 <ids_disconn_call>
	active_flag=0;
 150:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__data_end+0x1>
 154:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
	eeprom_write_byte(000000,3);
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	24 d3       	rcall	.+1608   	; 0x7a8 <eeprom_write_byte>
 160:	08 95       	ret

00000162 <__vector_1>:
	status=1;
}

/* ISR for OFF Signal from Remote*/
ISR(INT0_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	ids_system_disarm();
 184:	d3 df       	rcall	.-90     	; 0x12c <ids_system_disarm>
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <ids_cln_ubf>:
}

void ids_cln_ubf()
{
	/* Clean USART buffer */
	for (i=0;info[i]!='\0';i++)
 1a8:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <i+0x1>
 1ac:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <i>
 1b0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <info>
 1b4:	88 23       	and	r24, r24
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <ids_cln_ubf+0x2c>
 1b8:	4e e4       	ldi	r20, 0x4E	; 78
 1ba:	52 e0       	ldi	r21, 0x02	; 2
 1bc:	fa 01       	movw	r30, r20
	{
		info[i]='\0';
 1be:	11 92       	st	Z+, r1
 1c0:	9f 01       	movw	r18, r30
 1c2:	24 1b       	sub	r18, r20
 1c4:	35 0b       	sbc	r19, r21
}

void ids_cln_ubf()
{
	/* Clean USART buffer */
	for (i=0;info[i]!='\0';i++)
 1c6:	80 81       	ld	r24, Z
 1c8:	81 11       	cpse	r24, r1
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <ids_cln_ubf+0x16>
 1cc:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <i+0x1>
 1d0:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <i>
	{
		info[i]='\0';
	}
	/* Reset USART variables */
	x=0;
 1d4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <x+0x1>
 1d8:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <x>
	status=0;
 1dc:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <status+0x1>
 1e0:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <status>
 1e4:	08 95       	ret

000001e6 <ids_check_sms>:



void ids_check_sms()
{
	if (status==1)
 1e6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <status>
 1ea:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <status+0x1>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	c9 f5       	brne	.+114    	; 0x264 <ids_check_sms+0x7e>
	{
		if (strstr(info,"OWNER")!=NULL)
 1f2:	69 e2       	ldi	r22, 0x29	; 41
 1f4:	72 e0       	ldi	r23, 0x02	; 2
 1f6:	8e e4       	ldi	r24, 0x4E	; 78
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	b4 d2       	rcall	.+1384   	; 0x764 <strstr>
 1fc:	89 2b       	or	r24, r25
 1fe:	91 f1       	breq	.+100    	; 0x264 <ids_check_sms+0x7e>
		{
			if (strstr(info,"ON")!=NULL)
 200:	6f e2       	ldi	r22, 0x2F	; 47
 202:	72 e0       	ldi	r23, 0x02	; 2
 204:	8e e4       	ldi	r24, 0x4E	; 78
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	ad d2       	rcall	.+1370   	; 0x764 <strstr>
 20a:	89 2b       	or	r24, r25
 20c:	91 f0       	breq	.+36     	; 0x232 <ids_check_sms+0x4c>
			{
				/* SMS arrived for ON */
				ids_beep();
 20e:	ab d1       	rcall	.+854    	; 0x566 <ids_beep>
				ids_set_sys_led(ON);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	9f d1       	rcall	.+830    	; 0x554 <ids_set_sys_led>
				eeprom_write_byte(000000,2);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	c5 d2       	rcall	.+1418   	; 0x7a8 <eeprom_write_byte>
				active_flag=0;
 21e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__data_end+0x1>
 222:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
				ids_send_sms(number, on_sms);
 226:	60 e8       	ldi	r22, 0x80	; 128
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	84 ee       	ldi	r24, 0xE4	; 228
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	13 d2       	rcall	.+1062   	; 0x656 <ids_send_sms>
 230:	18 c0       	rjmp	.+48     	; 0x262 <ids_check_sms+0x7c>
			}
			else if (strstr(info,"OFF")!=NULL)
 232:	62 e3       	ldi	r22, 0x32	; 50
 234:	72 e0       	ldi	r23, 0x02	; 2
 236:	8e e4       	ldi	r24, 0x4E	; 78
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	94 d2       	rcall	.+1320   	; 0x764 <strstr>
 23c:	89 2b       	or	r24, r25
 23e:	89 f0       	breq	.+34     	; 0x262 <ids_check_sms+0x7c>
			{
				/* SMS arrived for OFF */
				ids_beep();
 240:	92 d1       	rcall	.+804    	; 0x566 <ids_beep>
				ids_set_sys_led(OFF);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	86 d1       	rcall	.+780    	; 0x554 <ids_set_sys_led>
				eeprom_write_byte(000000,3);
 248:	63 e0       	ldi	r22, 0x03	; 3
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac d2       	rcall	.+1368   	; 0x7a8 <eeprom_write_byte>
				active_flag=0;
 250:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__data_end+0x1>
 254:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
				ids_send_sms(number ,off_sms);
 258:	6c e5       	ldi	r22, 0x5C	; 92
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	84 ee       	ldi	r24, 0xE4	; 228
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	fa d1       	rcall	.+1012   	; 0x656 <ids_send_sms>
			}
			ids_cln_ubf();
 262:	a2 df       	rcall	.-188    	; 0x1a8 <ids_cln_ubf>
 264:	08 95       	ret

00000266 <ids_alert_system>:
	}
}

void ids_alert_system() //ids_start
{
	active_flag=1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x1>
 26e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
	/* Activate Communication & Alarm System */
	ids_siren_enable(); //ids_siren_enable
 272:	28 d1       	rcall	.+592    	; 0x4c4 <ids_siren_enable>
	// ASHOK START
	ids_call_owner(1); // Call to OWNER1 //Make this function dynamic, ids_call_owner()
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	99 d1       	rcall	.+818    	; 0x5ac <ids_call_owner>
	ids_delayms(350); // delay of 35 seconds
 27a:	8e e5       	ldi	r24, 0x5E	; 94
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	26 d1       	rcall	.+588    	; 0x4cc <ids_delayms>
	if ( active_flag == 1)
 280:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
 284:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	09 f0       	breq	.+2      	; 0x28e <ids_alert_system+0x28>
 28c:	48 c0       	rjmp	.+144    	; 0x31e <ids_alert_system+0xb8>
	{
		ids_disconn_call();  //ids_disconn_call
 28e:	b8 d1       	rcall	.+880    	; 0x600 <ids_disconn_call>
		ids_delayms(10);
 290:	8a e0       	ldi	r24, 0x0A	; 10
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	1b d1       	rcall	.+566    	; 0x4cc <ids_delayms>
		ids_call_owner(2); // Call to OWNER2 ids_call_owner
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	88 d1       	rcall	.+784    	; 0x5ac <ids_call_owner>
		ids_delayms(350); // delay of 35 seconds
 29c:	8e e5       	ldi	r24, 0x5E	; 94
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	15 d1       	rcall	.+554    	; 0x4cc <ids_delayms>
		if ( active_flag == 1 )// write comments why are we using this flag
 2a2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
 2a6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	c1 f5       	brne	.+112    	; 0x31e <ids_alert_system+0xb8>
		{
			ids_disconn_call();
 2ae:	a8 d1       	rcall	.+848    	; 0x600 <ids_disconn_call>
			ids_cln_ubf();
 2b0:	7b df       	rcall	.-266    	; 0x1a8 <ids_cln_ubf>
			ids_delayms(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0a d1       	rcall	.+532    	; 0x4cc <ids_delayms>
			ids_attention();
 2b8:	66 d1       	rcall	.+716    	; 0x586 <ids_attention>
			ids_delayms(10);
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	06 d1       	rcall	.+524    	; 0x4cc <ids_delayms>
			ids_send_sms(number, sms1); // send first message
 2c0:	6c e0       	ldi	r22, 0x0C	; 12
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	84 ee       	ldi	r24, 0xE4	; 228
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	c6 d1       	rcall	.+908    	; 0x656 <ids_send_sms>
			ids_cln_ubf();
 2ca:	6e df       	rcall	.-292    	; 0x1a8 <ids_cln_ubf>
			ids_delayms(300); // delay of 30 seconds
 2cc:	8c e2       	ldi	r24, 0x2C	; 44
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	fd d0       	rcall	.+506    	; 0x4cc <ids_delayms>
			if ( active_flag == 1 )
 2d2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
 2d6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	01 f5       	brne	.+64     	; 0x31e <ids_alert_system+0xb8>
			{
				ids_attention();
 2de:	53 d1       	rcall	.+678    	; 0x586 <ids_attention>
				ids_delayms(10);
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	f3 d0       	rcall	.+486    	; 0x4cc <ids_delayms>
				ids_send_sms(number, sms2); // send second message
 2e6:	6b eb       	ldi	r22, 0xBB	; 187
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	84 ee       	ldi	r24, 0xE4	; 228
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	b3 d1       	rcall	.+870    	; 0x656 <ids_send_sms>
				ids_cln_ubf();
 2f0:	5b df       	rcall	.-330    	; 0x1a8 <ids_cln_ubf>
				ids_delayms(300); // delay of 30 seconds
 2f2:	8c e2       	ldi	r24, 0x2C	; 44
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	ea d0       	rcall	.+468    	; 0x4cc <ids_delayms>
				if ( active_flag == 1 )
 2f8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
 2fc:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	69 f4       	brne	.+26     	; 0x31e <ids_alert_system+0xb8>
				{
					ids_attention();
 304:	40 d1       	rcall	.+640    	; 0x586 <ids_attention>
					ids_delayms(10);
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	e0 d0       	rcall	.+448    	; 0x4cc <ids_delayms>
					ids_send_sms(number, sms3); // send third message
 30c:	60 e6       	ldi	r22, 0x60	; 96
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	84 ee       	ldi	r24, 0xE4	; 228
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	a0 d1       	rcall	.+832    	; 0x656 <ids_send_sms>
					ids_cln_ubf();
 316:	48 df       	rcall	.-368    	; 0x1a8 <ids_cln_ubf>
					ids_delayms(10);
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	d7 d0       	rcall	.+430    	; 0x4cc <ids_delayms>
				}
			}
		}
	}
	ids_cln_ubf();
 31e:	44 df       	rcall	.-376    	; 0x1a8 <ids_cln_ubf>
 320:	08 95       	ret

00000322 <ids_read_sensors>:
}

void ids_read_sensors()
{
	if (ids_panic_btn_status()) //ids_panic_btn_status()
 322:	11 d1       	rcall	.+546    	; 0x546 <ids_panic_btn_status>
 324:	89 2b       	or	r24, r25
 326:	11 f0       	breq	.+4      	; 0x32c <ids_read_sensors+0xa>
	{
		ids_alert_system();
 328:	9e df       	rcall	.-196    	; 0x266 <ids_alert_system>
		ids_cln_ubf();
 32a:	3e df       	rcall	.-388    	; 0x1a8 <ids_cln_ubf>
	}
	if (eeprom_read_byte(000000)==2)
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	33 d2       	rcall	.+1126   	; 0x798 <eeprom_read_byte>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	81 f5       	brne	.+96     	; 0x396 <ids_read_sensors+0x74>
	{
		/* System is ON now */
		x=0;
 336:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <x+0x1>
 33a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <x>
		status=0;
 33e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <status+0x1>
 342:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <status>
		active_flag=0;
 346:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__data_end+0x1>
 34a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
		ids_delayms(5);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	bc d0       	rcall	.+376    	; 0x4cc <ids_delayms>
		st=0;
 354:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <st+0x1>
 358:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <st>
		/* Checking Sensors Indication */
		if (((ids_read_pir() == 0)||(ids_mrs_read() == 0)))
 35c:	d8 d0       	rcall	.+432    	; 0x50e <ids_read_pir>
 35e:	89 2b       	or	r24, r25
 360:	19 f0       	breq	.+6      	; 0x368 <ids_read_sensors+0x46>
 362:	c7 d0       	rcall	.+398    	; 0x4f2 <ids_mrs_read>
 364:	89 2b       	or	r24, r25
 366:	41 f5       	brne	.+80     	; 0x3b8 <ids_read_sensors+0x96>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	84 e3       	ldi	r24, 0x34	; 52
 36c:	9c e0       	ldi	r25, 0x0C	; 12
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <ids_read_sensors+0x4c>
 376:	00 c0       	rjmp	.+0      	; 0x378 <ids_read_sensors+0x56>
 378:	00 00       	nop
		{
			_delay_ms(500);
			if  (((ids_read_pir() == 0)||(ids_mrs_read() == 0))&&(active_flag==0))
 37a:	c9 d0       	rcall	.+402    	; 0x50e <ids_read_pir>
 37c:	89 2b       	or	r24, r25
 37e:	19 f0       	breq	.+6      	; 0x386 <ids_read_sensors+0x64>
 380:	b8 d0       	rcall	.+368    	; 0x4f2 <ids_mrs_read>
 382:	89 2b       	or	r24, r25
 384:	c9 f4       	brne	.+50     	; 0x3b8 <ids_read_sensors+0x96>
 386:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
 38a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
 38e:	89 2b       	or	r24, r25
 390:	99 f4       	brne	.+38     	; 0x3b8 <ids_read_sensors+0x96>
			{
				ids_alert_system();
 392:	69 df       	rcall	.-302    	; 0x266 <ids_alert_system>
 394:	08 95       	ret
			}
		}
	}
	else if(eeprom_read_byte(000000)==3)
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	79 f4       	brne	.+30     	; 0x3b8 <ids_read_sensors+0x96>
	{
		/* System is OFF now */
		x=0;
 39a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <x+0x1>
 39e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <x>
		status=0;
 3a2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <status+0x1>
 3a6:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <status>
		ids_delayms(5);
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	8e d0       	rcall	.+284    	; 0x4cc <ids_delayms>
		st=0;
 3b0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <st+0x1>
 3b4:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <st>
 3b8:	08 95       	ret

000003ba <ids_retrv_owner_num>:
}

int ids_retrv_owner_num() //ids_retrv_owner_num()
{
	int ret=0;
	s=0;
 3ba:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <s+0x1>
 3be:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <s>
	j=0;
 3c2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <j+0x1>
 3c6:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <j>
	ids_cln_ubf(); //ids_cln_ubuf
 3ca:	ee de       	rcall	.-548    	; 0x1a8 <ids_cln_ubf>
	ids_mem_type();     //ids_mem_type()
 3cc:	92 d1       	rcall	.+804    	; 0x6f2 <ids_mem_type>
	ids_cln_ubf();
 3ce:	ec de       	rcall	.-552    	; 0x1a8 <ids_cln_ubf>
	ids_delayms(1);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	7b d0       	rcall	.+246    	; 0x4cc <ids_delayms>
	ids_extract_cnum(); //ids_extract_cnum
 3d6:	a4 d1       	rcall	.+840    	; 0x720 <ids_extract_cnum>
	if(status==1) //if possible put this code in a separate function
 3d8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <status>
 3dc:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <status+0x1>
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <ids_retrv_owner_num+0x2c>
 3e4:	4b c0       	rjmp	.+150    	; 0x47c <__stack+0x1d>
	{
		/* Owner Contact Number extraction Code */
		for (int z=0;info[z]!='\0';z++)
 3e6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <info>
 3ea:	88 23       	and	r24, r24
 3ec:	91 f1       	breq	.+100    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ee:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <s>
 3f2:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <s+0x1>
 3f6:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <j>
 3fa:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <j+0x1>
 3fe:	ef e4       	ldi	r30, 0x4F	; 79
 400:	f2 e0       	ldi	r31, 0x02	; 2
		{
			if (info[z]=='"') s++;
 402:	82 32       	cpi	r24, 0x22	; 34
 404:	19 f4       	brne	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	18 c0       	rjmp	.+48     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			else if (s==3)
 40c:	23 30       	cpi	r18, 0x03	; 3
 40e:	31 05       	cpc	r19, r1
 410:	39 f4       	brne	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{
				number[j]=info[z];
 412:	da 01       	movw	r26, r20
 414:	ac 51       	subi	r26, 0x1C	; 28
 416:	bd 4f       	sbci	r27, 0xFD	; 253
 418:	8c 93       	st	X, r24
				j++;
 41a:	4f 5f       	subi	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
			else if (s==4) break;
 420:	24 30       	cpi	r18, 0x04	; 4
 422:	31 05       	cpc	r19, r1
 424:	59 f4       	brne	.+22     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <s+0x1>
 42e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <s>
 432:	50 93 47 02 	sts	0x0247, r21	; 0x800247 <j+0x1>
 436:	40 93 46 02 	sts	0x0246, r20	; 0x800246 <j>
 43a:	0b c0       	rjmp	.+22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	ids_delayms(1);
	ids_extract_cnum(); //ids_extract_cnum
	if(status==1) //if possible put this code in a separate function
	{
		/* Owner Contact Number extraction Code */
		for (int z=0;info[z]!='\0';z++)
 43c:	81 91       	ld	r24, Z+
 43e:	81 11       	cpse	r24, r1
 440:	e0 cf       	rjmp	.-64     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 442:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <s+0x1>
 446:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <s>
 44a:	50 93 47 02 	sts	0x0247, r21	; 0x800247 <j+0x1>
 44e:	40 93 46 02 	sts	0x0246, r20	; 0x800246 <j>
				number[j]=info[z];
				j++;
			}
			else if (s==4) break;
		}
		if((strlen(number)==10)||strlen(number)==13)
 452:	e4 ee       	ldi	r30, 0xE4	; 228
 454:	f2 e0       	ldi	r31, 0x02	; 2
 456:	01 90       	ld	r0, Z+
 458:	00 20       	and	r0, r0
 45a:	e9 f7       	brne	.-6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	e4 5e       	subi	r30, 0xE4	; 228
 460:	f2 40       	sbci	r31, 0x02	; 2
 462:	ea 30       	cpi	r30, 0x0A	; 10
 464:	f1 05       	cpc	r31, r1
 466:	11 f0       	breq	.+4      	; 0x46c <__stack+0xd>
 468:	3d 97       	sbiw	r30, 0x0d	; 13
 46a:	59 f4       	brne	.+22     	; 0x482 <__stack+0x23>
		{
			ids_cln_ubf();
 46c:	9d de       	rcall	.-710    	; 0x1a8 <ids_cln_ubf>
			ids_delayms(10);
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	2c d0       	rcall	.+88     	; 0x4cc <ids_delayms>
			ids_sel_sms_mode(); //ids_mode_sms or ids_sel_sms_mode
 474:	d9 d0       	rcall	.+434    	; 0x628 <ids_sel_sms_mode>
			ret=1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	08 95       	ret
	eeprom_write_byte(000000,3);
}

int ids_retrv_owner_num() //ids_retrv_owner_num()
{
	int ret=0;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	08 95       	ret
			ids_sel_sms_mode(); //ids_mode_sms or ids_sel_sms_mode
			ret=1;
		}
		else
		{
			ret=0;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return ret;
}
 486:	08 95       	ret

00000488 <ids_init>:
		st=0;
	}
}

void ids_init()
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
	int owner;
	/* Port Initialization */
	ids_port_init();
 48c:	49 d0       	rcall	.+146    	; 0x520 <ids_port_init>
	/* External Interrupt Initialization */
	ids_extint_init();
 48e:	54 d0       	rcall	.+168    	; 0x538 <ids_extint_init>
	/* USART Initialization */
	ids_usart_init();
 490:	70 d0       	rcall	.+224    	; 0x572 <ids_usart_init>
	ids_delayms(30); // Delay until USART initializes completely
 492:	8e e1       	ldi	r24, 0x1E	; 30
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	1a d0       	rcall	.+52     	; 0x4cc <ids_delayms>
	/* Getting OWNER Number from SIM*/
	do
	{
		//ids_delayms(5);
		ids_set_sys_led(ON);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	5b d0       	rcall	.+182    	; 0x554 <ids_set_sys_led>
		owner = ids_retrv_owner_num(); // returns 1 if GOT owner number else 0
 49e:	8d df       	rcall	.-230    	; 0x3ba <ids_retrv_owner_num>
 4a0:	ec 01       	movw	r28, r24
		ids_set_sys_led(OFF);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	56 d0       	rcall	.+172    	; 0x554 <ids_set_sys_led>
	} while (owner != 1);
 4a8:	21 97       	sbiw	r28, 0x01	; 1
 4aa:	b1 f7       	brne	.-20     	; 0x498 <ids_init+0x10>
	owner=0;
	ids_cln_ubf();
 4ac:	7d de       	rcall	.-774    	; 0x1a8 <ids_cln_ubf>
	eeprom_write_byte(000000,3);
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	79 d1       	rcall	.+754    	; 0x7a8 <eeprom_write_byte>
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <main>:
	status=0;
}

int main ()
{
	ids_init(); // System Initialize
 4bc:	e5 df       	rcall	.-54     	; 0x488 <ids_init>
	//WDTCR |= (1<<WDCE) | (1<<WDE);
	/* Turn off WDT */
	//WDTCR = 0x00;
	while (1) //Infinite Loop
	{
		ids_read_sensors(); // Checks sensors status
 4be:	31 df       	rcall	.-414    	; 0x322 <ids_read_sensors>
		ids_check_sms(); // Checks the SMS for system ON or OFF
 4c0:	92 de       	rcall	.-732    	; 0x1e6 <ids_check_sms>
	}
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <main+0x2>

000004c4 <ids_siren_enable>:
/* Alarm System Initialization */


void ids_siren_enable()
{
	PORTB |= (1<<PINB1);
 4c4:	c1 9a       	sbi	0x18, 1	; 24
 4c6:	08 95       	ret

000004c8 <ids_siren_disable>:
}

void ids_siren_disable()
{
	PORTB &=~ (1<<PINB1);
 4c8:	c1 98       	cbi	0x18, 1	; 24
 4ca:	08 95       	ret

000004cc <ids_delayms>:
#include <st_delay.h>
/* Delay in milliseconds */
void ids_delayms(unsigned int t)
{
	unsigned int i;
	for(i=0;i<t;i++)
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	81 f0       	breq	.+32     	; 0x4f0 <ids_delayms+0x24>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	4f ef       	ldi	r20, 0xFF	; 255
 4d6:	50 e7       	ldi	r21, 0x70	; 112
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	41 50       	subi	r20, 0x01	; 1
 4dc:	50 40       	sbci	r21, 0x00	; 0
 4de:	60 40       	sbci	r22, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <ids_delayms+0xe>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <ids_delayms+0x18>
 4e4:	00 00       	nop
 4e6:	2f 5f       	subi	r18, 0xFF	; 255
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	28 17       	cp	r18, r24
 4ec:	39 07       	cpc	r19, r25
 4ee:	91 f7       	brne	.-28     	; 0x4d4 <ids_delayms+0x8>
 4f0:	08 95       	ret

000004f2 <ids_mrs_read>:
 
 /* Pull down Pin B4 */
 int ids_mrs_4()
 {
	 
	 return (PINC & (1<<PINC3));
 4f2:	93 b3       	in	r25, 0x13	; 19
 
 /* Pull down Pin B5 */
 int ids_mrs_5()
 {
	
	 return (PINC & (1<<PINC4));
 4f4:	83 b3       	in	r24, 0x13	; 19
{
	int  mrs4, mrs5;
	mrs4 = ids_mrs_4();
	mrs5 = ids_mrs_5();	 
	
	if (mrs4)
 4f6:	93 fd       	sbrc	r25, 3
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <ids_mrs_read+0x16>
	{
		return 0 ;
	}
	else if (mrs5)
 4fa:	82 95       	swap	r24
 4fc:	8f 70       	andi	r24, 0x0F	; 15
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	89 27       	eor	r24, r25
	mrs4 = ids_mrs_4();
	mrs5 = ids_mrs_5();	 
	
	if (mrs4)
	{
		return 0 ;
 502:	81 70       	andi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	08 95       	ret
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		return 1 ;
	}
	 
}
 50c:	08 95       	ret

0000050e <ids_read_pir>:

/* Pull down Pin B0 */ 

int ids_read_pir()
{
	return ((PINC & (1<<PINC5))==0);
 50e:	83 b3       	in	r24, 0x13	; 19
 510:	82 95       	swap	r24
 512:	86 95       	lsr	r24
 514:	87 70       	andi	r24, 0x07	; 7
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	89 27       	eor	r24, r25
 51a:	81 70       	andi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	08 95       	ret

00000520 <ids_port_init>:
/* Port Initialization */
void ids_port_init()
{
	/* Initialization Sensor's Pins  */
	/* Siren's Pin declared as Output */
	DDRB |= (1<<PINB1);
 520:	b9 9a       	sbi	0x17, 1	; 23
	/* Buzzer Pin declared as Input */
	DDRC |= (1<<PINC0);
 522:	a0 9a       	sbi	0x14, 0	; 20
	DDRD |= ((1<<PIND7)|(1<<PIND6)|(1<<PIND5)|(1<<PIND4)); 
 524:	81 b3       	in	r24, 0x11	; 17
 526:	80 6f       	ori	r24, 0xF0	; 240
 528:	81 bb       	out	0x11, r24	; 17
	PORTC |= ((1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5));
 52a:	85 b3       	in	r24, 0x15	; 21
 52c:	8e 63       	ori	r24, 0x3E	; 62
 52e:	85 bb       	out	0x15, r24	; 21
	PORTD |= (/*(1 << PIND2)|(1 <<PIND3)|*/(1<<PIND7)|(1<<PIND4));    // turn On the Pull-up
 530:	82 b3       	in	r24, 0x12	; 18
 532:	80 69       	ori	r24, 0x90	; 144
 534:	82 bb       	out	0x12, r24	; 18
 536:	08 95       	ret

00000538 <ids_extint_init>:
}

void ids_extint_init()
{
	// PD0 is now an input with pull-up enabled
	GICR |= ((1 << INT0)|(1 << INT1));      // Turns on INT0
 538:	8b b7       	in	r24, 0x3b	; 59
 53a:	80 6c       	ori	r24, 0xC0	; 192
 53c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x05;
 53e:	85 e0       	ldi	r24, 0x05	; 5
 540:	85 bf       	out	0x35, r24	; 53
	sei();                    // turn on interrupts
 542:	78 94       	sei
 544:	08 95       	ret

00000546 <ids_panic_btn_status>:
}

int ids_panic_btn_status()
{
	
	return ((PINC & (1<<PINC1))==0);
 546:	83 b3       	in	r24, 0x13	; 19
 548:	86 95       	lsr	r24
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	89 27       	eor	r24, r25
 54e:	81 70       	andi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	08 95       	ret

00000554 <ids_set_sys_led>:
/* Activate Whole System */


void ids_set_sys_led(int stat)
{
	if (stat == ON)
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	11 f4       	brne	.+4      	; 0x55e <ids_set_sys_led+0xa>
	{
		PORTD |= (1<<PORTD6);
 55a:	96 9a       	sbi	0x12, 6	; 18
 55c:	08 95       	ret

	}
	else if(stat == OFF)
 55e:	89 2b       	or	r24, r25
 560:	09 f4       	brne	.+2      	; 0x564 <ids_set_sys_led+0x10>
	{
		PORTD &=~ (1<<PORTD6);
 562:	96 98       	cbi	0x12, 6	; 18
 564:	08 95       	ret

00000566 <ids_beep>:
}

void ids_beep()
{
	// Buzzer Notification
	PORTC |= (1<<PINC0);
 566:	a8 9a       	sbi	0x15, 0	; 21
	ids_delayms(1);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	af df       	rcall	.-162    	; 0x4cc <ids_delayms>
	PORTC &=~ (1<<PINC0);
 56e:	a8 98       	cbi	0x15, 0	; 21
 570:	08 95       	ret

00000572 <ids_usart_init>:
//ASHOK END
									
/* Transmission & reception Initialization */						
void ids_usart_init()
{
	UBRRL=(uint8_t)UBRRVAL;												
 572:	83 e3       	ldi	r24, 0x33	; 51
 574:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);													
 576:	10 bc       	out	0x20, r1	; 32
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 578:	80 b5       	in	r24, 0x20	; 32
 57a:	86 68       	ori	r24, 0x86	; 134
 57c:	80 bd       	out	0x20, r24	; 32
	UCSRB|=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 57e:	8a b1       	in	r24, 0x0a	; 10
 580:	88 69       	ori	r24, 0x98	; 152
 582:	8a b9       	out	0x0a, r24	; 10
 584:	08 95       	ret

00000586 <ids_attention>:
} 

void ids_attention()
{
	for(int z=0;cmd[z]!='\0';z++)
 586:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <cmd>
 58a:	88 23       	and	r24, r24
 58c:	61 f0       	breq	.+24     	; 0x5a6 <ids_attention+0x20>
 58e:	e6 e2       	ldi	r30, 0x26	; 38
 590:	f2 e0       	ldi	r31, 0x02	; 2
	{
		UDR = cmd[z];
 592:	8c b9       	out	0x0c, r24	; 12
 594:	8f e1       	ldi	r24, 0x1F	; 31
 596:	9e e4       	ldi	r25, 0x4E	; 78
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <ids_attention+0x12>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <ids_attention+0x18>
 59e:	00 00       	nop
	UCSRB|=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
} 

void ids_attention()
{
	for(int z=0;cmd[z]!='\0';z++)
 5a0:	81 91       	ld	r24, Z+
 5a2:	81 11       	cpse	r24, r1
 5a4:	f6 cf       	rjmp	.-20     	; 0x592 <ids_attention+0xc>
	{
		UDR = cmd[z];
		_delay_ms(10);
	}
	//UDR = 13;
	UDR = 10;
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	8c b9       	out	0x0c, r24	; 12
 5aa:	08 95       	ret

000005ac <ids_call_owner>:
}

void ids_call_owner(int ownr)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
	if (ownr==1)
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	91 05       	cpc	r25, r1
 5b4:	71 f4       	brne	.+28     	; 0x5d2 <ids_call_owner+0x26>
	{
		for(int z=0;cmd1[z]!='\0';z++)
 5b6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cmd1>
 5ba:	88 23       	and	r24, r24
 5bc:	c9 f0       	breq	.+50     	; 0x5f0 <ids_call_owner+0x44>
 5be:	ce ef       	ldi	r28, 0xFE	; 254
 5c0:	d1 e0       	ldi	r29, 0x01	; 1
		{
			/* Call OWNER1 */
			UDR = cmd1[z];
 5c2:	8c b9       	out	0x0c, r24	; 12
			ids_delayms(1);
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	81 df       	rcall	.-254    	; 0x4cc <ids_delayms>

void ids_call_owner(int ownr)
{
	if (ownr==1)
	{
		for(int z=0;cmd1[z]!='\0';z++)
 5ca:	89 91       	ld	r24, Y+
 5cc:	81 11       	cpse	r24, r1
 5ce:	f9 cf       	rjmp	.-14     	; 0x5c2 <ids_call_owner+0x16>
 5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <ids_call_owner+0x44>
			/* Call OWNER1 */
			UDR = cmd1[z];
			ids_delayms(1);
		}
	}
	else if(ownr==2)
 5d2:	02 97       	sbiw	r24, 0x02	; 2
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <ids_call_owner+0x44>
	{	
		for(int z=0;cmd0[z]!='\0';z++)
 5d6:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <cmd0>
 5da:	88 23       	and	r24, r24
 5dc:	49 f0       	breq	.+18     	; 0x5f0 <ids_call_owner+0x44>
 5de:	c2 e1       	ldi	r28, 0x12	; 18
 5e0:	d2 e0       	ldi	r29, 0x02	; 2
		{
			/* OWNER2 call */
			UDR = cmd0[z];
 5e2:	8c b9       	out	0x0c, r24	; 12
			ids_delayms(1);
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	71 df       	rcall	.-286    	; 0x4cc <ids_delayms>
			ids_delayms(1);
		}
	}
	else if(ownr==2)
	{	
		for(int z=0;cmd0[z]!='\0';z++)
 5ea:	89 91       	ld	r24, Y+
 5ec:	81 11       	cpse	r24, r1
 5ee:	f9 cf       	rjmp	.-14     	; 0x5e2 <ids_call_owner+0x36>
			/* OWNER2 call */
			UDR = cmd0[z];
			ids_delayms(1);
		}
	}
	ids_delayms(40);
 5f0:	88 e2       	ldi	r24, 0x28	; 40
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	6b df       	rcall	.-298    	; 0x4cc <ids_delayms>
	UDR = 10;
 5f6:	8a e0       	ldi	r24, 0x0A	; 10
 5f8:	8c b9       	out	0x0c, r24	; 12
	
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <ids_disconn_call>:
//ASHOK END

/* Send Command 2 */
void ids_disconn_call()
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
	for(int z=0;cmd2[z]!='\0';z++)
 604:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <cmd2>
 608:	88 23       	and	r24, r24
 60a:	49 f0       	breq	.+18     	; 0x61e <ids_disconn_call+0x1e>
 60c:	c4 ef       	ldi	r28, 0xF4	; 244
 60e:	d1 e0       	ldi	r29, 0x01	; 1
	{	
		UDR = cmd2[z];
 610:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	5a df       	rcall	.-332    	; 0x4cc <ids_delayms>
//ASHOK END

/* Send Command 2 */
void ids_disconn_call()
{
	for(int z=0;cmd2[z]!='\0';z++)
 618:	89 91       	ld	r24, Y+
 61a:	81 11       	cpse	r24, r1
 61c:	f9 cf       	rjmp	.-14     	; 0x610 <ids_disconn_call+0x10>
	{	
		UDR = cmd2[z];
		ids_delayms(1);
	}
	//UDR = 13;
	UDR = 10;
 61e:	8a e0       	ldi	r24, 0x0A	; 10
 620:	8c b9       	out	0x0c, r24	; 12
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <ids_sel_sms_mode>:

void ids_sel_sms_mode()
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
	for(int z=0;cmd4[z]!='\0';z++)
 62c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <cmd4>
 630:	88 23       	and	r24, r24
 632:	49 f0       	breq	.+18     	; 0x646 <ids_sel_sms_mode+0x1e>
 634:	c2 ec       	ldi	r28, 0xC2	; 194
 636:	d1 e0       	ldi	r29, 0x01	; 1
	{
		UDR=cmd4[z];
 638:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	46 df       	rcall	.-372    	; 0x4cc <ids_delayms>
	UDR = 10;
}

void ids_sel_sms_mode()
{
	for(int z=0;cmd4[z]!='\0';z++)
 640:	89 91       	ld	r24, Y+
 642:	81 11       	cpse	r24, r1
 644:	f9 cf       	rjmp	.-14     	; 0x638 <ids_sel_sms_mode+0x10>
	{
		UDR=cmd4[z];
		ids_delayms(1);
	}
	ids_delayms(20);
 646:	84 e1       	ldi	r24, 0x14	; 20
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	40 df       	rcall	.-384    	; 0x4cc <ids_delayms>
	UDR = 10;
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	8c b9       	out	0x0c, r24	; 12
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <ids_send_sms>:

//ASHOK START
//functions to send message

void ids_send_sms(char *number, char *message)
{	
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	8b 01       	movw	r16, r22
	strcat(cmd5, number);
 660:	bc 01       	movw	r22, r24
 662:	83 ea       	ldi	r24, 0xA3	; 163
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	73 d0       	rcall	.+230    	; 0x74e <strcat>
	strcat(cmd5, "\"\r");
 668:	c3 ea       	ldi	r28, 0xA3	; 163
 66a:	d1 e0       	ldi	r29, 0x01	; 1
 66c:	fe 01       	movw	r30, r28
 66e:	01 90       	ld	r0, Z+
 670:	00 20       	and	r0, r0
 672:	e9 f7       	brne	.-6      	; 0x66e <ids_send_sms+0x18>
 674:	31 97       	sbiw	r30, 0x01	; 1
 676:	82 e2       	ldi	r24, 0x22	; 34
 678:	9d e0       	ldi	r25, 0x0D	; 13
 67a:	a0 e0       	ldi	r26, 0x00	; 0
 67c:	80 83       	st	Z, r24
 67e:	91 83       	std	Z+1, r25	; 0x01
 680:	a2 83       	std	Z+2, r26	; 0x02
	ids_delayms(1);
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	22 df       	rcall	.-444    	; 0x4cc <ids_delayms>
	
	for(int z=0;cmd5[z]!='\0';z++)
 688:	88 81       	ld	r24, Y
 68a:	88 23       	and	r24, r24
 68c:	49 f0       	breq	.+18     	; 0x6a0 <ids_send_sms+0x4a>
 68e:	c4 ea       	ldi	r28, 0xA4	; 164
 690:	d1 e0       	ldi	r29, 0x01	; 1
	{
		UDR=cmd5[z];
 692:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	19 df       	rcall	.-462    	; 0x4cc <ids_delayms>
{	
	strcat(cmd5, number);
	strcat(cmd5, "\"\r");
	ids_delayms(1);
	
	for(int z=0;cmd5[z]!='\0';z++)
 69a:	89 91       	ld	r24, Y+
 69c:	81 11       	cpse	r24, r1
 69e:	f9 cf       	rjmp	.-14     	; 0x692 <ids_send_sms+0x3c>
	{
		UDR=cmd5[z];
		ids_delayms(1);
	}
	ids_delayms(20);
 6a0:	84 e1       	ldi	r24, 0x14	; 20
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	13 df       	rcall	.-474    	; 0x4cc <ids_delayms>
	UDR = 10;
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	8c b9       	out	0x0c, r24	; 12
		
	ids_delayms(1);
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e df       	rcall	.-484    	; 0x4cc <ids_delayms>
	
	for(int z=0;message[z]!='\0';z++)
 6b0:	f8 01       	movw	r30, r16
 6b2:	80 81       	ld	r24, Z
 6b4:	88 23       	and	r24, r24
 6b6:	49 f0       	breq	.+18     	; 0x6ca <ids_send_sms+0x74>
 6b8:	e8 01       	movw	r28, r16
 6ba:	21 96       	adiw	r28, 0x01	; 1
	{
		UDR=message[z];
 6bc:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	04 df       	rcall	.-504    	; 0x4cc <ids_delayms>
	ids_delayms(20);
	UDR = 10;
		
	ids_delayms(1);
	
	for(int z=0;message[z]!='\0';z++)
 6c4:	89 91       	ld	r24, Y+
 6c6:	81 11       	cpse	r24, r1
 6c8:	f9 cf       	rjmp	.-14     	; 0x6bc <ids_send_sms+0x66>
	{
		UDR=message[z];
		ids_delayms(1);
	}
	UDR = 26;
 6ca:	8a e1       	ldi	r24, 0x1A	; 26
 6cc:	8c b9       	out	0x0c, r24	; 12
	ids_delayms(20);
 6ce:	84 e1       	ldi	r24, 0x14	; 20
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fc de       	rcall	.-520    	; 0x4cc <ids_delayms>
	UDR = 10;
 6d4:	8a e0       	ldi	r24, 0x0A	; 10
 6d6:	8c b9       	out	0x0c, r24	; 12
	strcpy(cmd5,"AT+CMGS=\"");
 6d8:	e6 e3       	ldi	r30, 0x36	; 54
 6da:	f2 e0       	ldi	r31, 0x02	; 2
 6dc:	a3 ea       	ldi	r26, 0xA3	; 163
 6de:	b1 e0       	ldi	r27, 0x01	; 1
 6e0:	01 90       	ld	r0, Z+
 6e2:	0d 92       	st	X+, r0
 6e4:	8a 95       	dec	r24
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <ids_send_sms+0x8a>
}
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <ids_mem_type>:

/* Select memory of Phone book */
void ids_mem_type()
{
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
	for(int z=0;cmdSM[z]!='\0';z++)
 6f6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <cmdSM>
 6fa:	88 23       	and	r24, r24
 6fc:	49 f0       	breq	.+18     	; 0x710 <ids_mem_type+0x1e>
 6fe:	c5 ee       	ldi	r28, 0xE5	; 229
 700:	d1 e0       	ldi	r29, 0x01	; 1
	{
		UDR=cmdSM[z];
 702:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	e1 de       	rcall	.-574    	; 0x4cc <ids_delayms>
}

/* Select memory of Phone book */
void ids_mem_type()
{
	for(int z=0;cmdSM[z]!='\0';z++)
 70a:	89 91       	ld	r24, Y+
 70c:	81 11       	cpse	r24, r1
 70e:	f9 cf       	rjmp	.-14     	; 0x702 <ids_mem_type+0x10>
	{
		UDR=cmdSM[z];
		ids_delayms(1);
	}
	ids_delayms(20);
 710:	84 e1       	ldi	r24, 0x14	; 20
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	db de       	rcall	.-586    	; 0x4cc <ids_delayms>
	UDR = 10;
 716:	8a e0       	ldi	r24, 0x0A	; 10
 718:	8c b9       	out	0x0c, r24	; 12
}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <ids_extract_cnum>:

//Request for OWNER contact
void ids_extract_cnum()
{
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
	for(int z=0;cmd3[z]!='\0';z++)
 724:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <cmd3>
 728:	88 23       	and	r24, r24
 72a:	49 f0       	breq	.+18     	; 0x73e <ids_extract_cnum+0x1e>
 72c:	cc ec       	ldi	r28, 0xCC	; 204
 72e:	d1 e0       	ldi	r29, 0x01	; 1
	{
		UDR=cmd3[z];
 730:	8c b9       	out	0x0c, r24	; 12
		ids_delayms(1);
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	ca de       	rcall	.-620    	; 0x4cc <ids_delayms>
}

//Request for OWNER contact
void ids_extract_cnum()
{
	for(int z=0;cmd3[z]!='\0';z++)
 738:	89 91       	ld	r24, Y+
 73a:	81 11       	cpse	r24, r1
 73c:	f9 cf       	rjmp	.-14     	; 0x730 <ids_extract_cnum+0x10>
	{
		UDR=cmd3[z];
		ids_delayms(1);
	}
	ids_delayms(20);
 73e:	84 e1       	ldi	r24, 0x14	; 20
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	c4 de       	rcall	.-632    	; 0x4cc <ids_delayms>
	UDR = 10;
 744:	8a e0       	ldi	r24, 0x0A	; 10
 746:	8c b9       	out	0x0c, r24	; 12
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <strcat>:
 74e:	fb 01       	movw	r30, r22
 750:	dc 01       	movw	r26, r24
 752:	0d 90       	ld	r0, X+
 754:	00 20       	and	r0, r0
 756:	e9 f7       	brne	.-6      	; 0x752 <strcat+0x4>
 758:	11 97       	sbiw	r26, 0x01	; 1
 75a:	01 90       	ld	r0, Z+
 75c:	0d 92       	st	X+, r0
 75e:	00 20       	and	r0, r0
 760:	e1 f7       	brne	.-8      	; 0x75a <strcat+0xc>
 762:	08 95       	ret

00000764 <strstr>:
 764:	fb 01       	movw	r30, r22
 766:	51 91       	ld	r21, Z+
 768:	55 23       	and	r21, r21
 76a:	a9 f0       	breq	.+42     	; 0x796 <strstr+0x32>
 76c:	bf 01       	movw	r22, r30
 76e:	dc 01       	movw	r26, r24
 770:	4d 91       	ld	r20, X+
 772:	45 17       	cp	r20, r21
 774:	41 11       	cpse	r20, r1
 776:	e1 f7       	brne	.-8      	; 0x770 <strstr+0xc>
 778:	59 f4       	brne	.+22     	; 0x790 <strstr+0x2c>
 77a:	cd 01       	movw	r24, r26
 77c:	01 90       	ld	r0, Z+
 77e:	00 20       	and	r0, r0
 780:	49 f0       	breq	.+18     	; 0x794 <strstr+0x30>
 782:	4d 91       	ld	r20, X+
 784:	40 15       	cp	r20, r0
 786:	41 11       	cpse	r20, r1
 788:	c9 f3       	breq	.-14     	; 0x77c <strstr+0x18>
 78a:	fb 01       	movw	r30, r22
 78c:	41 11       	cpse	r20, r1
 78e:	ef cf       	rjmp	.-34     	; 0x76e <strstr+0xa>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	08 95       	ret

00000798 <eeprom_read_byte>:
 798:	e1 99       	sbic	0x1c, 1	; 28
 79a:	fe cf       	rjmp	.-4      	; 0x798 <eeprom_read_byte>
 79c:	9f bb       	out	0x1f, r25	; 31
 79e:	8e bb       	out	0x1e, r24	; 30
 7a0:	e0 9a       	sbi	0x1c, 0	; 28
 7a2:	99 27       	eor	r25, r25
 7a4:	8d b3       	in	r24, 0x1d	; 29
 7a6:	08 95       	ret

000007a8 <eeprom_write_byte>:
 7a8:	26 2f       	mov	r18, r22

000007aa <eeprom_write_r18>:
 7aa:	e1 99       	sbic	0x1c, 1	; 28
 7ac:	fe cf       	rjmp	.-4      	; 0x7aa <eeprom_write_r18>
 7ae:	9f bb       	out	0x1f, r25	; 31
 7b0:	8e bb       	out	0x1e, r24	; 30
 7b2:	2d bb       	out	0x1d, r18	; 29
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	e2 9a       	sbi	0x1c, 2	; 28
 7ba:	e1 9a       	sbi	0x1c, 1	; 28
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
